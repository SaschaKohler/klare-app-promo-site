name: Docker Build, Push and Deploy

on:
  push:
    branches: [main]
    # Nur bestimmte Dateien ausl√∂sen
    paths:
      - "src/**"
      - "public/**"
      - "content/**"
      - "package*.json"
      - "Dockerfile"
      - "next.config.js"
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Semantische Versionierung basierend auf Tags
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: blisha234/klare-app-promo-site
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=short
            type=ref,event=branch
            type=ref,event=tag

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=blisha234/klare-app-promo-site:buildcache
          cache-to: type=registry,ref=blisha234/klare-app-promo-site:buildcache,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Deploy using direct kubectl
        env:
          KUBE_SERVER: ${{ secrets.KUBE_SERVER }}
          KUBE_TOKEN: ${{ secrets.KUBE_TOKEN }}
        run: |
          # Test connection
          kubectl --server="${KUBE_SERVER}" --token="${KUBE_TOKEN}" --insecure-skip-tls-verify=true \
            get ns

          # Rollout restart
          kubectl --server="${KUBE_SERVER}" --token="${KUBE_TOKEN}" --insecure-skip-tls-verify=true \
            rollout restart deployment/klare-app-promo-site -n klare-methode-app

          # Check status
          kubectl --server="${KUBE_SERVER}" --token="${KUBE_TOKEN}" --insecure-skip-tls-verify=true \
            rollout status deployment/klare-app-promo-site -n klare-methode-app

